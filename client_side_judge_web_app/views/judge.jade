extends layout

block content
  h1(id='judge_id') #{judge_id} Judge

  div.group_btns
      .row
      .col.s12.center.col_spacing
       button(class='waves-effect waves-dark btn-large white result_btns' id="good_lift_btn" onclick='is_good_lift("true");confirm("good_lift_btn");') 
        <p class='judge_btn_text'>Good</p>
      .row
      .col.s12.center.col_spacing
       button(class='waves-effect waves-dark btn-large red result_btns' id="bad_lift_btn" onclick='is_good_lift("false");confirm("bad_lift_btn");') 
        <p class='judge_btn_text'>No Good</p>
      .row
      .col.s1.center
      button(class='waves-effect waves-dark btn-small' id="bars_loaded" onclick='trigger_bar_is_loaded();') 
        <p class='bar_loaded_text'>Bars Loaded</p>



    script.
        // hide the bars loaded button except for on head judge
        if (document.getElementById('judge_id').textContent !== 'Head Judge'){
            document.getElementById('bars_loaded').classList.add('hide')
        }
        else{
            document.getElementById('bars_loaded').classList.remove('hide')
        }

        // init the socket
        const socket = new WebSocket("ws://" + location.hostname + ":1080");
        function parse_for_id(){
            var text = document.getElementById('judge_id').textContent;
            split_strings = text.split(" ")
            id = null
            if (split_strings[0] === "Left"){
                id = '1'
            }
            else if(split_strings[0] === "Head"){
                id = '2'
            }
            else{
                id = '3'
            }
            return id
        }
        var is_good_lift = function(value) {
            var is_good = (value === 'true');
            var id = parse_for_id()
            socket.send(JSON.stringify({judge_id: id, is_good_from_judge: is_good}));
        }

        var confirm = function(id){
            if (id === 'good_lift_btn'){
                // set the opposite button to hidden
                var btn = document.getElementById('bad_lift_btn');
                btn.style.border = '0px solid yellow';
                // trigger checkmark for the btn pressed
                btn = document.getElementById(id);
                btn.style.border = '3px solid yellow';
            }
            else{
                // set the opposite button to hidden
                var btn = document.getElementById('good_lift_btn');
                btn.style.border = '0px solid yellow';
                // trigger checkmark for the btn pressed
                btn = document.getElementById(id);
                btn.style.border = '3px solid yellow';
            }
        }

        var trigger_bar_is_loaded = function(){
            socket.send(JSON.stringify({timer: "60"}));
        }

        socket.addEventListener('message', function (data) {
            console.log(data);
            if (data.data === 'disable_btns'){
                Array.from(document.querySelectorAll('.result_btns')).forEach(function(button) {
                    button.classList.add('disabled')
                });
            }
            else if (data.data === 'enable_btns'){
                Array.from(document.querySelectorAll('.result_btns')).forEach(function(button) {
                    button.classList.remove('disabled')
                });
                // set checkmarks to hidden
                var btn = document.getElementById('bad_lift_btn');
                btn.style.border = '0px solid yellow';
                btn = document.getElementById('good_lift_btn');
                btn.style.border = '0px solid yellow';
            }
        });